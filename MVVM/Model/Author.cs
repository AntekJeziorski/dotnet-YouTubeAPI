using Google.Apis.Services;
using Google.Apis.YouTube.v3.Data;
using Google.Apis.YouTube.v3;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace YouTubeAPI
{
    /// <summary>
    /// Represents Authors table which contains main information about youtube channel.
    /// </summary>
    public class Author
    {
        /// <summary>
        /// Gets or sets unique ChannelID of the author in table. Represents primary key in Authors table. Contains unique string generated by YouTube.
        /// </summary>
        [Key]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or sets Title of the channel.
        /// </summary>
        public string ChannelTitle { get; set; }

        /// <summary>
        /// Gets or Sets YouTube channel description.
        /// </summary>
        public string ChannelDescription { get; set; }

        /// <summary>
        /// Gets or Sets YouTube channel joining date.
        /// </summary>
        public DateTime JoiningDate { get; set; }

        /// <summary>
        /// Gets or Sets URL for medium channel thumbnail.
        /// </summary>
        public string ThumbnailMedium { get; set; }
        public DateTime SubscribeTime { get; set; }

        /// <summary>
        /// Connection to many entries in AuthorsHistory table which represents one to many relationship.
        /// </summary>
        public virtual ICollection<AuthorsHistory> AuthorsHistory { get; set; }

        /// <summary>
        /// Non-parametric construcor for Authors class.
        /// </summary>
        public Author()
        {
        }

        /// <summary>
        /// Contructor for Author class. Creates new instance of Author class which represents one entry in Authors table.
        /// </summary>
        /// <param name="Id">YouTube channel ID</param>
        public Author(string Id)
        {
            try
            {
                ChannelId = Id;
                ChannelTitle = Id;
                GetChannelData();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally {}
        }

        /// <summary>
        /// Gets Author data identified by ChannelId.
        /// </summary>
        public void GetChannelData()
        {
            var API = new APILink();
            var channelData = API.GetChannelData(ChannelId);
            if (channelData.Item5)
            {
                (ChannelTitle, ChannelDescription, JoiningDate, ThumbnailMedium) = (channelData.Item1, channelData.Item2, channelData.Item3, channelData.Item4);
            }
            else
            {
                (ChannelId, ChannelDescription, JoiningDate, ThumbnailMedium) = (channelData.Item1, channelData.Item2, channelData.Item3, channelData.Item4);
            }
        }
    }
}
