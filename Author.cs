using Google.Apis.Services;
using Google.Apis.YouTube.v3.Data;
using Google.Apis.YouTube.v3;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YouTubeAPI
{
    /// <summary>
    /// Represents Authors table which contains main information about youtube channel.
    /// </summary>
    public class Author
    {
        /// <summary>
        /// Gets or sets unique ChannelID of the author in table. Represents primary key in Authors table. Contains unique string generated by YouTube.
        /// </summary>
        [Key]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or sets Title of the channel.
        /// </summary>
        public string ChannelTitle { get; set; }

        /// <summary>
        /// Gets or Sets YouTube channel description.
        /// </summary>
        public string ChannelDescription { get; set; }

        /// <summary>
        /// Gets or Sets YouTube channel joining date.
        /// </summary>
        public DateTime JoiningDate { get; set; }

        /// <summary>
        /// Gets or Sets URL for medium channel thumbnail.
        /// </summary>
        public string ThumbnailMedium { get; set; }
        public DateTime SubscribeTime { get; set; }

        /// <summary>
        /// Connection to many entries in AuthorsHistory table which represents one to many relationship.
        /// </summary>
        public virtual ICollection<AuthorsHistory> AuthorsHistory { get; set; }

        /// <summary>
        /// Non-parametric construcor for Authors class.
        /// </summary>
        public Author()
        {
        }

        /// <summary>
        /// Contructor for Author class. Creates new instance of Author class which represents one entry in Authors table.
        /// </summary>
        /// <param name="Id">YouTube channel ID</param>
        public Author(string Id)
        {
            try
            {
                ChannelId = Id;
                ChannelTitle = Id;
                GetChannelData();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally {}
        }

        /// <summary>
        /// Gets Author data identified by ChannelId using YoutubeAPI services.
        /// </summary>
        public void GetChannelData()
        {
            var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "AIzaSyCTlONe6H40ircsdbuIq87DGV5gZeVv2wc",
                ApplicationName = this.GetType().ToString()
            });
            // Prepare the request
            ChannelsResource.ListRequest listRequest = youtubeService.Channels.List("snippet");
            listRequest.Id = ChannelId;
            try
            {
                // Execute the request
                ChannelListResponse response = listRequest.Execute();
                if (response.PageInfo.TotalResults > 0)
                {
                    // Access the channel information
                    foreach (var item in response.Items)
                    {
                        ChannelTitle = item.Snippet.Title;
                        ChannelDescription = item.Snippet.Description;
                        JoiningDate = item.Snippet.PublishedAt ?? DateTime.Now;
                        ThumbnailMedium = item.Snippet.Thumbnails.Medium.Url;
                    }
                }
                else
                {
                    listRequest.Id = null;
                    listRequest.ForUsername = ChannelTitle;

                    response = listRequest.Execute();
                    if (response.PageInfo.TotalResults == 1)
                    {
                        // Access the channel information
                        foreach (var item in response.Items)
                        {
                            ChannelId = item.Id;
                            ChannelDescription = item.Snippet.Description;
                            JoiningDate = item.Snippet.PublishedAt ?? DateTime.Now;
                            ThumbnailMedium = item.Snippet.Thumbnails.Medium.Url;
                        }
                    }
                    else
                    {
                        throw new Exception("Wrong Channel Id or name");
                    }
                }
            }
            catch (Exception ex)
            {
                // Re-throw exception
                throw ex;
            }
            Console.ReadLine();
        }
    }
}
