using Google.Apis.Services;
using Google.Apis.YouTube.v3.Data;
using Google.Apis.YouTube.v3;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace YouTubeAPI
{
    /// <summary>
    /// Represents Tracks table which contains main information about youtube video.
    /// </summary>
    public class Track
    {
        /// <summary>
        /// Gets or sets unique VideoID of the track in table. Represents primary key in Tracks table. Contains unique string generated by YouTube.
        /// </summary>
        [Key]
        public string VideoId { get; set; }

        /// <summary>
        /// Gets or sets Title of the track.
        /// </summary>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets Channel Title on which Video was uploaded.
        /// </summary>
        public string ChannelTitle { get; set; }

        /// <summary>
        /// Gets or Sets YouTube Channel ID.
        /// </summary>
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets YouTube video description.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets YouTube video release date.
        /// </summary>
        public DateTime ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets URL for medium video thumbnail.
        /// </summary>
        public string ThumbnailMedium { get; set; }
        public DateTime SubscribeTime { get; set; }

        /// <summary>
        /// Connection to many entries in TracksHistory table which represents one to many relationship.
        /// </summary>
        public virtual ICollection<TracksHistory> TracksHistory { get; set; }

        /// <summary>
        /// Non-parametric construcor for Track class.
        /// </summary>
        public Track() { }

        /// <summary>
        /// Contructor for Track class. Creates new instance of Track class which represents one entry in Tracks table.
        /// </summary>
        /// <param name="Id">Youtube video ID.</param>
        public Track(string Id)
        {
            try
            {
                VideoId = Id;
                GetViedoData();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally { }
            
        }

        /// <summary>
        /// Gets Track data identified by VideoId using YoutubeAPI services.
        /// </summary>
        public void GetViedoData()
        {
            var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "AIzaSyCTlONe6H40ircsdbuIq87DGV5gZeVv2wc",
                ApplicationName = this.GetType().ToString()
            });
            //string videoId = "nLIp4wd0oXs";
            // Prepare the request
            VideosResource.ListRequest listRequest = youtubeService.Videos.List("snippet");
            listRequest.Id = VideoId;
            try
            {
                // Execute the request
                VideoListResponse response = listRequest.Execute();
                if (response.PageInfo.TotalResults > 0)
                {
                    // Access the video information
                    foreach (var item in response.Items)
                    {
                    Title = item.Snippet.Title;
                    ChannelTitle = item.Snippet.ChannelTitle;
                    ChannelId = item.Snippet.ChannelId;
                    Description = item.Snippet.Description;
                    ReleaseDate = item.Snippet.PublishedAt ?? DateTime.Now;
                    ThumbnailMedium = item.Snippet.Thumbnails.Medium.Url;

                    Console.WriteLine("Title: " + Title);
                    Console.WriteLine("Viedo Id: " + VideoId);
                    Console.WriteLine("Channel Name: " + ChannelTitle);
                    Console.WriteLine("Channel Id: " + ChannelId);
                    }
                }
                else
                {
                    Console.WriteLine("Viedo not found!!!");
                    throw new Exception("Wrong Video Id");
                }
            }
            catch (Exception ex)
            {
                // Re-throw exception
                throw ex;
            }
            Console.ReadLine();
        }
    }
}
